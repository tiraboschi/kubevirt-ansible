---
- name: Check if {{ namespace }} exists
  shell: "{{ cluster_command }} get ns {{ namespace }}"
  ignore_errors: yes
  register: ns

- name: Create {{ namespace }} namespace
  shell: "{{ cluster_command }} create namespace {{ namespace }}"
  when: ns.rc != 0

- name: Render KubeVirt operator
  template:
    src: "kubevirt-operator.yaml.j2"
    dest: "/tmp/kubevirt-operator.yaml"

- name: Create KubeVirt Operator
  command: "{{ cluster_command }} apply -f /tmp/kubevirt-operator.yaml --validate=false"

- name: Enable kubevirt feature gates
  shell: "{{ cluster_command }} apply -f {{ kubevirt_template_dir }}/kubevirt-config.yaml -n {{ namespace }}"

- name: Render KubeVirt resources
  template:
    src: "kubevirt-cr.yaml.j2"
    dest: "/tmp/kubevirt-cr.yaml"

- name: Create KubeVirt Resources
  command: "{{ cluster_command }} apply -f /tmp/kubevirt-cr.yaml --validate=false"

- name: Give the kubevirt-operator user privilages
  command: "{{ cluster_command }} adm policy add-scc-to-user privileged -n {{ namespace }} -z kubevirt-operator"

- name: Wait until virt-operator is running
  shell: "{{ cluster_command }} -n {{ namespace }} get deployment | grep virt-operator | awk \'{ if ($2 == $5) print \"0\"; else print \"1\"}\'"
  register: result
  until: result.stdout == "0"
  retries: 24
  delay: 10

- name: Wait until virt-api is running
  shell: "{{ cluster_command }} -n {{ namespace }} get deployment | grep virt-api | awk \'{ if ($2 == $5) print \"0\"; else print \"1\"}\'"
  register: result
  until: result.stdout == "0"
  retries: 24
  delay: 10

- name: Wait until virt-controller is running
  shell: "{{ cluster_command }} -n {{ namespace }} get deployment | grep virt-controller | awk \'{ if ($2 == $5) print \"0\"; else print \"1\"}\'"
  register: result
  until: result.stdout == "0"
  retries: 24
  delay: 10

- name: Wait until virt-handler is running
  shell: "{{ cluster_command }} -n {{ namespace }} get daemonset | grep virt-handler | awk \'{ if ($3 == $4) print \"0\"; else print \"1\"}\'"
  register: result
  until: result.stdout == "0"
  retries: 50
  delay: 10

- name: Debug vmis
  command: "{{ cluster_command }} get crds"
  register: crds

- debug:
    var: crds.stdout
